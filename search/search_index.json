{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcda WSPR AI Lite Documentation","text":"<p>Welcome to the docs for wspr-ai-lite \u2014 a lightweight WSPR analytics dashboard built with DuckDB and Streamlit.</p>"},{"location":"#quick-links","title":"\ud83d\ude80 Quick Links","text":"<ul> <li>User Setup &amp; Usage \u2192 See README</li> <li>Developer Setup \u2192 See DEV_SETUP</li> <li>Makefile Guide \u2192 See MAKEFILE</li> <li>Testing \u2192 See TESTING</li> <li>Troubleshooting \u2192 See TROUBLESHOOTING</li> </ul>"},{"location":"#about","title":"\u2728 About","text":"<p>Explore Weak Signal Propagation Reporter (WSPR) data with an easy, local dashboard:</p> <ul> <li>\ud83d\udcca SNR distributions &amp; monthly spot trends</li> <li>\ud83d\udc42 Top reporters, most-heard TX stations</li> <li>\ud83c\udf0d Geographic spread &amp; distance/DX analysis</li> <li>\ud83d\udd04 QSO-like reciprocal reports</li> <li>\u23f1 Hourly activity heatmaps &amp; yearly unique counts</li> </ul> <p>Works on Windows, Linux, macOS \u2014 no heavy server required.</p>"},{"location":"#build-serve","title":"\ud83d\udee0 Build &amp; Serve","text":"<p>Install docs tooling:</p> <pre><code>pip install mkdocs mkdocs-material mkdocs-material-extensions\n</code></pre> <p>Serve locally:</p> <pre><code>mkdocs serve\n</code></pre> <p>Deploy to GitHub Pages:</p> <pre><code>mkdocs gh-deploy --force\n</code></pre>"},{"location":"DEV_SETUP/","title":"Developer Setup","text":""},{"location":"DEV_SETUP/#prereqs","title":"Prereqs","text":"<ul> <li>Python 3.10+</li> <li>macOS / Linux / Windows (WSL recommended on Windows)</li> </ul>"},{"location":"DEV_SETUP/#create-a-venv","title":"Create a venv","text":"<pre><code>python3 -m venv .venv\nsource .venv/bin/activate    # Windows: .venv\\Scripts\\activate\n</code></pre>"},{"location":"DEV_SETUP/#install-dependencies","title":"Install dependencies","text":"<pre><code>pip install -r requirements.txt\n</code></pre>"},{"location":"DEV_SETUP/#run-tests","title":"Run tests","text":"<pre><code>pytest -q\n# or\nmake test\n</code></pre>"},{"location":"DEV_SETUP/#lintformat-optional","title":"Lint/Format (optional)","text":"<p>This project keeps it simple \u2014 use your editor's formatter. You can add <code>ruff</code>/<code>black</code> later if you like.</p>"},{"location":"MAKEFILE/","title":"\ud83d\udcd8 Makefile Guide \u2014 wspr-ai-lite","text":"<p>The <code>Makefile</code> provides common shortcuts for developers and users of wspr-ai-lite. It helps set up the environment, run the app, ingest data, clean up, and reset the project.</p> <p>Instead of typing long commands, you can run:</p> <pre><code>make &lt;target&gt;\n</code></pre> <p>Example: <pre><code>make setup-dev\nmake run\n</code></pre></p>"},{"location":"MAKEFILE/#targets-overview","title":"\ud83d\udd27 Targets Overview","text":""},{"location":"MAKEFILE/#help","title":"<code>help</code>","text":"<p>Prints a list of all available targets.</p>"},{"location":"MAKEFILE/#setup-dev","title":"<code>setup-dev</code>","text":"<p>Creates a fresh Python virtual environment (<code>.venv</code>) and installs all dependencies from <code>requirements.txt</code>.</p> <p>Use this the first time you clone the repo, or after running <code>make distclean</code>.</p> <pre><code>make setup-dev\n</code></pre>"},{"location":"MAKEFILE/#venv","title":"<code>venv</code>","text":"<p>Creates the virtual environment (<code>.venv</code>) only, without installing packages.</p> <pre><code>make venv\n</code></pre>"},{"location":"MAKEFILE/#install","title":"<code>install</code>","text":"<p>Installs dependencies into an existing <code>.venv</code>. Useful if you updated <code>requirements.txt</code>.</p> <pre><code>make install\n</code></pre>"},{"location":"MAKEFILE/#run","title":"<code>run</code>","text":"<p>Runs the Streamlit dashboard.</p> <pre><code>make run\n</code></pre> <p>Then open http://localhost:8501 in your browser.</p>"},{"location":"MAKEFILE/#ingest","title":"<code>ingest</code>","text":"<p>Ingests WSPRNet data into DuckDB. By default, it pulls July 2014 as a test dataset:</p> <pre><code>make ingest\n</code></pre> <p>This fetches monthly archives (or uses the cache), parses them, and writes to <code>data/wspr.duckdb</code>.</p>"},{"location":"MAKEFILE/#test","title":"<code>test</code>","text":"<p>Runs the test suite using <code>pytest</code>. The <code>PYTHONPATH</code> is set automatically so <code>pipelines/</code> is found.</p> <pre><code>make test\n</code></pre>"},{"location":"MAKEFILE/#clean","title":"<code>clean</code>","text":"<p>Removes temporary files, caches, test outputs, and local DuckDB databases:</p> <ul> <li><code>__pycache__/</code></li> <li><code>.pytest_cache/</code></li> <li><code>.cache/</code>, <code>.cache_history.json</code></li> <li><code>data/*.duckdb</code> (local DB)</li> <li>Coverage reports</li> </ul> <pre><code>make clean\n</code></pre>"},{"location":"MAKEFILE/#distclean","title":"<code>distclean</code>","text":"<p>Runs <code>clean</code> plus removes all development artifacts:</p> <ul> <li><code>.venv/</code></li> <li><code>.streamlit/</code></li> <li>Temporary archives (<code>*.tar.gz</code>, <code>*.zip</code>)</li> <li><code>tmp/</code>, <code>temp/</code></li> </ul> <pre><code>make distclean\n</code></pre> <p>Use this before pushing to GitHub or when you want a completely clean repo.</p>"},{"location":"MAKEFILE/#reset","title":"<code>reset</code>","text":"<p>Performs a full rebuild from scratch:</p> <ol> <li>Runs <code>distclean</code></li> <li>Creates <code>.venv</code></li> <li>Installs dependencies</li> <li>Ingests a sample dataset (2014-07)</li> </ol> <pre><code>make reset\n</code></pre> <p>Afterwards, you can launch the app immediately:</p> <pre><code>make run\n</code></pre>"},{"location":"MAKEFILE/#common-workflows","title":"\ud83e\uddd1\u200d\ud83d\udcbb Common Workflows","text":"<ul> <li> <p>First-time setup <pre><code>make setup-dev\nmake ingest\nmake run\n</code></pre></p> </li> <li> <p>Run tests before pushing <pre><code>make test\n</code></pre></p> </li> <li> <p>Clean your repo before committing/pushing <pre><code>make distclean\n</code></pre></p> </li> <li> <p>Start completely fresh (new venv + sample data) <pre><code>make reset\n</code></pre></p> </li> </ul> <p>This Makefile is designed to make development repeatable, reliable, and fast.</p>"},{"location":"TESTING/","title":"Testing","text":""},{"location":"TESTING/#with-pytest","title":"With pytest","text":"<pre><code>pytest -q\n</code></pre>"},{"location":"TESTING/#with-makefile-optional","title":"With Makefile (optional)","text":"<pre><code>make test\n</code></pre>"},{"location":"TESTING/#what-gets-tested","title":"What gets tested?","text":"<ul> <li><code>month_range</code> correctness</li> <li>Band mapping from frequency</li> <li>CSV parsing of required columns</li> </ul>"},{"location":"TROUBLESHOOTING/","title":"Troubleshooting","text":""},{"location":"TROUBLESHOOTING/#database-not-found-in-streamlit","title":"\"Database not found\" in Streamlit","text":"<p>Run ingest first: <pre><code>python pipelines/ingest.py --from 2014-07 --to 2014-07\n</code></pre></p>"},{"location":"TROUBLESHOOTING/#ingest-is-slow-or-re-downloads","title":"Ingest is slow or re-downloads","text":"<ul> <li>Use the <code>--cache-dir</code> (default <code>.cache</code>). Files are reused if present.</li> <li>Clean all cached locations you ever used: <pre><code>python pipelines/ingest.py --clean-cache\n</code></pre></li> </ul>"},{"location":"TROUBLESHOOTING/#no-data-appears-for-a-yearband","title":"No data appears for a year/band","text":"<ul> <li>You may not have ingested that year/month or that band had no activity.</li> <li>Try a different year/band pair that you know has data.</li> </ul>"},{"location":"TROUBLESHOOTING/#distance-shows-no-valid-grid-pairs","title":"Distance shows \"No valid grid pairs\"","text":"<ul> <li>Some rows lack <code>tx_grid</code> or <code>reporter_grid</code> \u2014 distance can't be computed.</li> <li>Ingest more months or check another band/year.</li> </ul>"},{"location":"TROUBLESHOOTING/#windows-python","title":"Windows + Python","text":"<p>Prefer WSL or ensure you have a proper Python environment (not MS Store).</p>"},{"location":"user-setup/","title":"User Setup &amp; Usage","text":"<p>This page mirrors the core usage instructions from the project README so it renders in the MkDocs site.</p>"},{"location":"user-setup/#quickstart","title":"Quickstart","text":"<ol> <li> <p>Create a virtual environment (optional but recommended) <pre><code>python3 -m venv .venv &amp;&amp; source .venv/bin/activate\n</code></pre></p> </li> <li> <p>Install dependencies <pre><code>pip install -r requirements.txt\n</code></pre></p> </li> <li> <p>Ingest a sample month (e.g., July 2014) <pre><code>python pipelines/ingest.py --from 2014-07 --to 2014-07\n</code></pre></p> </li> <li> <p>Run the Streamlit UI <pre><code>streamlit run app/wspr_app.py\n</code></pre>    Open http://localhost:8501 in your browser.</p> </li> </ol>"},{"location":"user-setup/#notes","title":"Notes","text":"<ul> <li>Data is stored locally in <code>data/wspr.duckdb</code>.</li> <li>The ingest script caches downloads and can clean caches with <code>--clean-cache</code>.</li> <li>See the Makefile for shortcuts:   <pre><code>make setup-dev   # create venv + install deps\nmake ingest      # ingest sample month\nmake run         # run Streamlit UI\nmake test        # run pytest suite\n</code></pre></li> </ul> <p>For more details, refer to the repository README on GitHub.</p>"}]}